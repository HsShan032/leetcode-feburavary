class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        m,n = len(grid),len(grid[0])
        visited = set()
        q = deque()
        dirs = [(0,1),(1,0),(0,-1),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1)]
        if grid[0][0] == 0:
            q.append((1,(0,0)))
            visited.add((0,0))
        while q:
            steps,temp = q.popleft()
            #print(temp,steps)
            r,c = temp[0],temp[1]
            if r==m-1 and c==n-1:
                return steps
            for i,j in dirs:
                new_r,new_c = r + i, c + j
                if 0 <= new_r < m and 0 <= new_c < n and grid[new_r][new_c]==0 and (new_r,new_c) not in visited:
                    q.append((steps+1,(new_r,new_c)))
                    visited.add((new_r,new_c))
        return -1
